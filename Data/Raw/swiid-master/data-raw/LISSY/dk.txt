From: <postbox@lisdatacenter.org>
Subject: job 968693 dk
Date: June 11, 2022 at 6:00:08 PM GMT+2
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("dk") 
[1] "Loading dataset dk87h..."
dk87h,market_hh,0.5275,0.0035,110
dk87h,market_sqrt,0.4164,0.0032,110
dk87h,market_pc,0.4365,0.0034,110
dk87h,market_oecdm,0.413,0.0037,110
dk87h,market_ae,0.4177,0.0036,110
dk87h,gross_hh,0.3822,0.0026,110
dk87h,gross_sqrt,0.2845,0.0024,110
dk87h,gross_pc,0.2943,0.0024,110
dk87h,gross_oecdm,0.2784,0.0023,110
dk87h,gross_ae,0.2785,0.0025,110
dk87h,disp_hh,0.3561,0.0024,110
dk87h,disp_sqrt,0.2571,0.0026,110
dk87h,disp_pc,0.2649,0.0023,110
dk87h,disp_oecdm,0.2512,0.0026,110
dk87h,disp_ae,0.2492,0.0025,110
dk87h,con_hh,NaN,NA,110
dk87h,con_sqrt,NaN,NA,110
dk87h,con_pc,NaN,NA,110
dk87h,con_oecdm,NaN,NA,110
dk87h,con_ae,NaN,NA,110
[1] "Loading dataset dk92h..."
dk92h,market_hh,0.5563,0.0032,110
dk92h,market_sqrt,0.4509,0.004,110
dk92h,market_pc,0.4698,0.0037,110
dk92h,market_oecdm,0.4484,0.0037,110
dk92h,market_ae,0.4529,0.0041,110
dk92h,gross_hh,0.3827,0.0026,110
dk92h,gross_sqrt,0.2861,0.0027,110
dk92h,gross_pc,0.293,0.0028,110
dk92h,gross_oecdm,0.279,0.0026,110
dk92h,gross_ae,0.2782,0.0027,110
dk92h,disp_hh,0.3429,0.0025,110
dk92h,disp_sqrt,0.2412,0.0029,110
dk92h,disp_pc,0.2487,0.0029,110
dk92h,disp_oecdm,0.2323,0.0021,110
dk92h,disp_ae,0.2302,0.003,110
dk92h,con_hh,NaN,NA,110
dk92h,con_sqrt,NaN,NA,110
dk92h,con_pc,NaN,NA,110
dk92h,con_oecdm,NaN,NA,110
dk92h,con_ae,NaN,NA,110
[1] "Loading dataset dk95h..."
dk95h,market_hh,0.5498,0.0013,110
dk95h,market_sqrt,0.4443,0.0014,110
dk95h,market_pc,0.4651,0.0014,110
dk95h,market_oecdm,0.4413,0.0014,110
dk95h,market_ae,0.4471,0.0015,110
dk95h,gross_hh,0.3504,0.0011,110
dk95h,gross_sqrt,0.2603,0.0012,110
dk95h,gross_pc,0.2673,0.0011,110
dk95h,gross_oecdm,0.2509,0.0011,110
dk95h,gross_ae,0.2504,0.001,110
dk95h,disp_hh,0.3194,9e-04,110
dk95h,disp_sqrt,0.2198,0.0013,110
dk95h,disp_pc,0.2283,0.0012,110
dk95h,disp_oecdm,0.2085,0.0011,110
dk95h,disp_ae,0.2076,0.001,110
dk95h,con_hh,NaN,NA,110
dk95h,con_sqrt,NaN,NA,110
dk95h,con_pc,NaN,NA,110
dk95h,con_oecdm,NaN,NA,110
dk95h,con_ae,NaN,NA,110
[1] "Loading dataset dk00h..."
dk00h,market_hh,0.5425,0.0014,110
dk00h,market_sqrt,0.4368,0.0014,110
dk00h,market_pc,0.461,0.0014,110
dk00h,market_oecdm,0.435,0.0014,110
dk00h,market_ae,0.4413,0.0015,110
dk00h,gross_hh,0.3601,0.001,110
dk00h,gross_sqrt,0.2715,0.001,110
dk00h,gross_pc,0.28,0.001,110
dk00h,gross_oecdm,0.2642,0.0012,110
dk00h,gross_ae,0.2637,0.0011,110
dk00h,disp_hh,0.3229,0.001,110
dk00h,disp_sqrt,0.2257,9e-04,110
dk00h,disp_pc,0.2382,9e-04,110
dk00h,disp_oecdm,0.2168,0.001,110
dk00h,disp_ae,0.2166,0.001,110
dk00h,con_hh,NaN,NA,110
dk00h,con_sqrt,NaN,NA,110
dk00h,con_pc,NaN,NA,110
dk00h,con_oecdm,NaN,NA,110
dk00h,con_ae,NaN,NA,110
[1] "Loading dataset dk04h..."
dk04h,market_hh,0.5546,0.0013,110
dk04h,market_sqrt,0.4487,0.0016,110
dk04h,market_pc,0.4711,0.0014,110
dk04h,market_oecdm,0.4469,0.0014,110
dk04h,market_ae,0.4525,0.0015,110
dk04h,gross_hh,0.3589,0.0011,110
dk04h,gross_sqrt,0.2717,0.0011,110
dk04h,gross_pc,0.2792,0.0011,110
dk04h,gross_oecdm,0.2644,0.0012,110
dk04h,gross_ae,0.2632,0.0012,110
dk04h,disp_hh,0.325,9e-04,110
dk04h,disp_sqrt,0.23,0.0011,110
dk04h,disp_pc,0.243,0.001,110
dk04h,disp_oecdm,0.2215,0.001,110
dk04h,disp_ae,0.2213,0.001,110
dk04h,con_hh,NaN,NA,110
dk04h,con_sqrt,NaN,NA,110
dk04h,con_pc,NaN,NA,110
dk04h,con_oecdm,NaN,NA,110
dk04h,con_ae,NaN,NA,110
[1] "Loading dataset dk07h..."
dk07h,market_hh,0.5486,0.0014,110
dk07h,market_sqrt,0.4419,0.0014,110
dk07h,market_pc,0.4647,0.0016,110
dk07h,market_oecdm,0.4398,0.0015,110
dk07h,market_ae,0.4454,0.0015,110
dk07h,gross_hh,0.3688,0.0011,110
dk07h,gross_sqrt,0.2823,0.0013,110
dk07h,gross_pc,0.2903,0.0012,110
dk07h,gross_oecdm,0.2751,0.0013,110
dk07h,gross_ae,0.2742,0.0012,110
dk07h,disp_hh,0.3347,0.0011,110
dk07h,disp_sqrt,0.2407,0.0014,110
dk07h,disp_pc,0.254,0.0012,110
dk07h,disp_oecdm,0.2323,0.0013,110
dk07h,disp_ae,0.2324,0.0013,110
dk07h,con_hh,NaN,NA,110
dk07h,con_sqrt,NaN,NA,110
dk07h,con_pc,NaN,NA,110
dk07h,con_oecdm,NaN,NA,110
dk07h,con_ae,NaN,NA,110
[1] "Loading dataset dk10h..."
dk10h,market_hh,0.5794,0.0015,110
dk10h,market_sqrt,0.4704,0.0018,110
dk10h,market_pc,0.4899,0.0015,110
dk10h,market_oecdm,0.4684,0.0016,110
dk10h,market_ae,0.473,0.0014,110
dk10h,gross_hh,0.3741,0.0012,110
dk10h,gross_sqrt,0.2875,0.0014,110
dk10h,gross_pc,0.2911,0.0014,110
dk10h,gross_oecdm,0.2798,0.0015,110
dk10h,gross_ae,0.2773,0.0013,110
dk10h,disp_hh,0.3437,0.0014,110
dk10h,disp_sqrt,0.2507,0.0014,110
dk10h,disp_pc,0.259,0.0014,110
dk10h,disp_oecdm,0.2422,0.0013,110
dk10h,disp_ae,0.2406,0.0014,110
dk10h,con_hh,NaN,NA,110
dk10h,con_sqrt,NaN,NA,110
dk10h,con_pc,NaN,NA,110
dk10h,con_oecdm,NaN,NA,110
dk10h,con_ae,NaN,NA,110
[1] "Loading dataset dk13h..."
dk13h,market_hh,0.5889,0.0014,110
dk13h,market_sqrt,0.4804,0.0016,110
dk13h,market_pc,0.4981,0.0015,110
dk13h,market_oecdm,0.4783,0.0015,110
dk13h,market_ae,0.4825,0.0016,110
dk13h,gross_hh,0.3729,0.001,110
dk13h,gross_sqrt,0.2873,0.0013,110
dk13h,gross_pc,0.2892,0.0011,110
dk13h,gross_oecdm,0.2791,0.0012,110
dk13h,gross_ae,0.2762,0.0012,110
dk13h,disp_hh,0.3427,0.0013,110
dk13h,disp_sqrt,0.251,0.0012,110
dk13h,disp_pc,0.2577,0.0012,110
dk13h,disp_oecdm,0.2421,0.0013,110
dk13h,disp_ae,0.2401,0.0013,110
dk13h,con_hh,NaN,NA,110
dk13h,con_sqrt,NaN,NA,110
dk13h,con_pc,NaN,NA,110
dk13h,con_oecdm,NaN,NA,110
dk13h,con_ae,NaN,NA,110
[1] "Loading dataset dk16h..."
dk16h,market_hh,0.5915,0.0014,110
dk16h,market_sqrt,0.4833,0.0016,110
dk16h,market_pc,0.5006,0.0015,110
dk16h,market_oecdm,0.4808,0.0015,110
dk16h,market_ae,0.485,0.0014,110
dk16h,gross_hh,0.3785,0.0011,110
dk16h,gross_sqrt,0.2942,0.0015,110
dk16h,gross_pc,0.2957,0.0013,110
dk16h,gross_oecdm,0.2857,0.0012,110
dk16h,gross_ae,0.2829,0.0014,110
dk16h,disp_hh,0.347,0.0012,110
dk16h,disp_sqrt,0.2568,0.0013,110
dk16h,disp_pc,0.263,0.0013,110
dk16h,disp_oecdm,0.2476,0.0013,110
dk16h,disp_ae,0.2457,0.0012,110
dk16h,con_hh,NaN,NA,110
dk16h,con_sqrt,NaN,NA,110
dk16h,con_pc,NaN,NA,110
dk16h,con_oecdm,NaN,NA,110
dk16h,con_ae,NaN,NA,110
> 
> proc.time()
    user   system  elapsed 
 951.003    7.859 1075.343 


