From: <postbox@lisdatacenter.org>
Subject: job 968738 kr
Date: June 11, 2022 at 8:04:30 PM GMT+2
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        
  Use of the data in the LUXEMBOURG INCOME STUDY DATABASE is governed by
  regulations which do not allow copying or further distribution of the 
  survey microdata.                                                     

  Anyone violating these regulations will lose all privileges to the    
  databases and may be subject to prosecution under the law. In addition,
  any attempt to circumvent the LIS processing system or unauthorized entry
  into the LIS computing system will result in prosecution.             

  All papers written using the LUXEMBOURG INCOME STUDY DATABASE must be 
  submitted for entry into the Working Papers Series.                   
  Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is",  
+            "in", "ie", "il", "it", "jp", "lt", "lu", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn") 
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(67, 69, 71, 73:75, 78:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("kr") 
[1] "Loading dataset kr06h..."
kr06h,market_hh,0.3901,0.0031,110
kr06h,market_sqrt,0.3304,0.0028,110
kr06h,market_pc,0.3427,0.003,110
kr06h,market_oecdm,0.3304,0.0028,110
kr06h,market_ae,0.3328,0.0027,110
kr06h,gross_hh,0.3702,0.0029,110
kr06h,gross_sqrt,0.3135,0.0025,110
kr06h,gross_pc,0.3257,0.0027,110
kr06h,gross_oecdm,0.3129,0.003,110
kr06h,gross_ae,0.3153,0.0025,110
kr06h,disp_hh,0.3616,0.0028,110
kr06h,disp_sqrt,0.3058,0.0029,110
kr06h,disp_pc,0.3198,0.0029,110
kr06h,disp_oecdm,0.3051,0.0025,110
kr06h,disp_ae,0.3081,0.0028,110
kr06h,con_hh,0.3244,0.0025,110
kr06h,con_sqrt,0.2578,0.0025,110
kr06h,con_pc,0.2661,0.0026,110
kr06h,con_oecdm,0.2568,0.0028,110
kr06h,con_ae,0.2572,0.0026,110
[1] "Loading dataset kr08h..."
kr08h,market_hh,0.4105,0.0035,110
kr08h,market_sqrt,0.3441,0.0031,110
kr08h,market_pc,0.3554,0.0028,110
kr08h,market_oecdm,0.3442,0.0033,110
kr08h,market_ae,0.3461,0.0038,110
kr08h,gross_hh,0.3862,0.0031,110
kr08h,gross_sqrt,0.323,0.0031,110
kr08h,gross_pc,0.3343,0.0031,110
kr08h,gross_oecdm,0.3227,0.0031,110
kr08h,gross_ae,0.3245,0.0034,110
kr08h,disp_hh,0.3767,0.0033,110
kr08h,disp_sqrt,0.3139,0.0031,110
kr08h,disp_pc,0.3271,0.003,110
kr08h,disp_oecdm,0.3135,0.0032,110
kr08h,disp_ae,0.316,0.0027,110
kr08h,con_hh,0.3273,0.0031,110
kr08h,con_sqrt,0.2532,0.0032,110
kr08h,con_pc,0.2625,0.0028,110
kr08h,con_oecdm,0.2526,0.0029,110
kr08h,con_ae,0.2527,0.0025,110
[1] "Loading dataset kr10h..."
kr10h,market_hh,0.414,0.0039,110
kr10h,market_sqrt,0.3415,0.0032,110
kr10h,market_pc,0.3543,0.0033,110
kr10h,market_oecdm,0.3405,0.0032,110
kr10h,market_ae,0.3433,0.003,110
kr10h,gross_hh,0.3847,0.0036,110
kr10h,gross_sqrt,0.3172,0.0029,110
kr10h,gross_pc,0.3292,0.0031,110
kr10h,gross_oecdm,0.3155,0.0033,110
kr10h,gross_ae,0.318,0.0032,110
kr10h,disp_hh,0.377,0.0033,110
kr10h,disp_sqrt,0.31,0.0033,110
kr10h,disp_pc,0.324,0.003,110
kr10h,disp_oecdm,0.3084,0.0031,110
kr10h,disp_ae,0.3114,0.0031,110
kr10h,con_hh,0.3329,0.0027,110
kr10h,con_sqrt,0.2561,0.0028,110
kr10h,con_pc,0.2625,0.003,110
kr10h,con_oecdm,0.2546,0.0028,110
kr10h,con_ae,0.254,0.0027,110
[1] "Loading dataset kr12h..."
kr12h,market_hh,0.415,0.0039,110
kr12h,market_sqrt,0.3379,0.0037,110
kr12h,market_pc,0.3484,0.0035,110
kr12h,market_oecdm,0.3363,0.0034,110
kr12h,market_ae,0.3383,0.0034,110
kr12h,gross_hh,0.3856,0.0036,110
kr12h,gross_sqrt,0.3145,0.003,110
kr12h,gross_pc,0.3242,0.0035,110
kr12h,gross_oecdm,0.3121,0.0033,110
kr12h,gross_ae,0.3139,0.0036,110
kr12h,disp_hh,0.3772,0.0031,110
kr12h,disp_sqrt,0.3068,0.0036,110
kr12h,disp_pc,0.3186,0.0034,110
kr12h,disp_oecdm,0.3045,0.0034,110
kr12h,disp_ae,0.3069,0.003,110
kr12h,con_hh,0.3265,0.0031,110
kr12h,con_sqrt,0.2494,0.003,110
kr12h,con_pc,0.257,0.0027,110
kr12h,con_oecdm,0.2474,0.003,110
kr12h,con_ae,0.2473,0.0025,110
[1] "Loading dataset kr14h..."
kr14h,market_hh,0.4251,0.0036,110
kr14h,market_sqrt,0.3414,0.0032,110
kr14h,market_pc,0.3538,0.0033,110
kr14h,market_oecdm,0.3409,0.0036,110
kr14h,market_ae,0.3433,0.0034,110
kr14h,gross_hh,0.3866,0.0034,110
kr14h,gross_sqrt,0.3105,0.0037,110
kr14h,gross_pc,0.3214,0.0034,110
kr14h,gross_oecdm,0.3093,0.0031,110
kr14h,gross_ae,0.3111,0.003,110
kr14h,disp_hh,0.3773,0.0032,110
kr14h,disp_sqrt,0.3022,0.003,110
kr14h,disp_pc,0.3151,0.0032,110
kr14h,disp_oecdm,0.3011,0.0029,110
kr14h,disp_ae,0.3035,0.003,110
kr14h,con_hh,0.3422,0.0033,110
kr14h,con_sqrt,0.2619,0.0031,110
kr14h,con_pc,0.2678,0.0032,110
kr14h,con_oecdm,0.2605,0.0031,110
kr14h,con_ae,0.2596,0.0028,110
[1] "Loading dataset kr16h..."
kr16h,market_hh,0.4421,0.0045,110
kr16h,market_sqrt,0.354,0.0039,110
kr16h,market_pc,0.3665,0.0033,110
kr16h,market_oecdm,0.3528,0.0038,110
kr16h,market_ae,0.3554,0.004,110
kr16h,gross_hh,0.3927,0.0041,110
kr16h,gross_sqrt,0.3135,0.0036,110
kr16h,gross_pc,0.3237,0.0033,110
kr16h,gross_oecdm,0.3113,0.0032,110
kr16h,gross_ae,0.3129,0.0035,110
kr16h,disp_hh,0.3828,0.0032,110
kr16h,disp_sqrt,0.3046,0.0033,110
kr16h,disp_pc,0.3172,0.0031,110
kr16h,disp_oecdm,0.3025,0.0034,110
kr16h,disp_ae,0.3049,0.0031,110
kr16h,con_hh,0.3493,0.0033,110
kr16h,con_sqrt,0.268,0.003,110
kr16h,con_pc,0.2718,0.0033,110
kr16h,con_oecdm,0.2647,0.0031,110
kr16h,con_ae,0.2632,0.0033,110
> 
> proc.time()
   user  system elapsed 
131.228   2.620 151.518 


